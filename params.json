{"tagline":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Telapi-ruby","google":"","body":"# TelAPI Ruby Gem\r\n\r\nSee www.telapi.com to signup for TelAPI.\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'telapi'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install telapi\r\n\r\n## Authentication and Configuration\r\n\r\nEvery API request requires a valid *account_sid* and *auth_token*. By default these are set to *nil*, so your application\r\nshould set them in its configuration (e.g. Ruby on Rails initializer).\r\n\r\nFor example:\r\n\r\n    Telapi.config do |config|\r\n      config.account_sid = 'abc123'\r\n      config.auth_token  = 'xyz567'\r\n    end\r\n\r\nYou can also set individual settings directly:\r\n\r\n    Telapi.config.ssl_ca_path = '/some/path'\r\n\r\nInspecting the current configuration returns a hash:\r\n\r\n    p Telapi.config # (or Telapi.config.inspect)\r\n    #=> {:base_uri=>\"https://api.telapi.com/2011-07-01/\", :ssl_ca_path=>\"/some/path\", :account_sid=>'abc123', :auth_token=>'xyz567'}\r\n\r\n## Design\r\n\r\nMinimal code is needed to retrieve objects and perform operations. There's no need to instantiate a client object -- work directly with the desired classes.\r\n\r\nMost classes provide identically named class and instance methods for ultimate flexibility. For example, to hang up an existing call, you can call either of the following:\r\n\r\n    call = Telapi::Call.get('123abc')\r\n    call.hangup\r\n\r\n    # avoids an additional network request\r\n    Telapi::Call.hangup('123abc')\r\n\r\nIndividual objects are wrapped into a Resource instance, which exposes all of the attributes documented in the [TelAPI documentation](http://www.telapi.com/docs/) as accessors and avoids the need to deal with direct JSON responses in your application code. A convenient *attributes* method allows you to dump out the object's values.\r\n\r\n    Telapi::Account.get.attributes\r\n    # => { ...hash of keys and values... }\r\n\r\nMethods that return collections wrap Resource objects in a Resource Collection instance, which behaves similar to an Array, but also includes meta info about totals, page size, current page, etc.\r\n\r\n## Documentation\r\n\r\nDetailed documentation can be found at [RubyDoc](http://rubydoc.info/gems/telapi/) and [the official TelAPI documentation site](http://www.telapi.com/docs/).\r\n\r\n## Usage Examples - REST API\r\n\r\nRefer to the documentation for more examples.\r\n\r\n### Get account details\r\n\r\n    acct = Telapi::Account.get\r\n    acct.friendly_name    # => \"My Account\"\r\n    acct.account_balance  # => \"25.000\"\r\n\r\n### Get available numbers\r\n\r\n    numbers = Telapi::AvailablePhoneNumber.list('US', :AreaCode => '805')\r\n    numbers.each { |n| puts n.phone_number }\r\n    # => +18052585701\r\n    #    +18052585702\r\n\r\n### Get list of calls\r\n\r\n    Telapi::Call.list # => returns ResouceCollection of Telapi::Call objects\r\n\r\n### Make a call\r\n\r\n    Telapi::Call.make('12223334444', '13334445555', 'http://mycallback...')\r\n\r\n### Record a call\r\n\r\n    call = Telapi::Call.get('123abc')\r\n    call.record\r\n\r\n    # or invoke the class method to avoid an additional network request\r\n    Telapi::Call.record('123abc')\r\n\r\n### Send an SMS message\r\n\r\n    Telapi::Message.create('12223334444', '13334445555', 'Hey you')\r\n\r\n### Transcribe audio\r\n\r\n    Telapi::Transcription.transcribe_audio('http://some-audio-url')\r\n\r\n### Caller ID\r\n\r\n    Telapi::CallerId.lookup('12223334444')\r\n\r\n## Usage Examples - Inbound XML\r\n\r\n### Say\r\n\r\n    ix = Telapi::InboundXml.new do\r\n      Say('Hello.', :loop => 3, :voice => 'man')\r\n      Say('Hello, my name is Jane.', :voice => 'woman')\r\n      Say('Now I will not stop talking.', :loop => 0)\r\n    end\r\n\r\n    ix.response\r\n\r\n    # results in the following XML:\r\n    # <?xml version=\"1.0\"?>\r\n    # <Response>\r\n    #   <Say loop=\"3\" voice=\"man\">Hello.</Say>\r\n    #   <Say voice=\"woman\">Hello, my name is Jane.</Say>\r\n    #   <Say loop=\"0\">Now I will not stop talking.</Say>\r\n    # </Response>\r\n\r\n### Play\r\n\r\n    Telapi::InboundXml.new { Play('http://example.com/hello.mp3', :loop => 3) }\r\n\r\n### Gather\r\n\r\n    Telapi::InboundXml.new do\r\n      Gather(:action      => 'http://example.com/example-callback-url/say?example=simple.xml',\r\n             :method      => 'GET',\r\n             :numDigits   => '4',\r\n             :finishOnKey => '#') {\r\n        Say 'Please enter your 4 digit pin.'\r\n      }\r\n    end\r\n\r\n### SMS Response\r\n\r\n    Telapi::InboundXml.new do\r\n      Sms(\r\n        'Test message sent from TelAPI!',\r\n        :action => 'http://liveoutput.com/telapi-test-sms-action',\r\n        :method => 'POST',\r\n        :from => '1112223333',\r\n        :to => '3334445555',\r\n        :statusCallback => 'http://liveoutput.com/telapi-test-status-callback'\r\n      )\r\n    end\r\n\r\n## Compatibility\r\n\r\nCurrently targeted for Ruby 1.9.\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n"}